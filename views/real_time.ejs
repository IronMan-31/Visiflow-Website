<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>River Depth Monitor - M.O.N.K.Y OS</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.0.2"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

    <style>
      @import url("https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;500;600;700&display=swap");

      :root {
        --radius: 0.625rem;
        --background: oklch(0.2029 0.0037 345.62);
        --foreground: oklch(0.9851 0 0);
        --card: oklch(0.2029 0.0037 345.62);
        --card-foreground: oklch(0.9851 0 0);
        --primary: oklch(0.4703 0.2364 263.19);
        --primary-foreground: oklch(0.9851 0 0);
        --secondary: oklch(0.269 0 0);
        --muted: oklch(0.2393 0 0);
        --muted-foreground: oklch(0.708 0 0);
        --accent: oklch(0.9851 0 0 / 5%);
        --border: oklch(1 0 0 / 10%);
        --pop: oklch(0.9851 0 0 / 2.5%);
        --success: oklch(0.7775 0.2447 144.9);
        --warning: oklch(0.769 0.188 70.08);
        --destructive: oklch(0.5961 0.2006 36.48);
        --chart-1: oklch(0.488 0.243 264.376);
        --chart-2: oklch(0.696 0.17 162.48);
        --chart-3: oklch(0.769 0.188 70.08);
        --chart-4: oklch(0.6 0.25 320);
        --chart-5: oklch(0.55 0.22 180);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Roboto Mono", monospace;
        background-color: var(--muted);
        color: var(--foreground);
        line-height: 1.5;
      }

      .container {
        max-width: 1400px;
        margin: 0 auto;
        margin-top: 100px;
      }

      .header1 {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1.5rem;
        border: 2px solid var(--pop);
        background-color: var(--background);
        margin-bottom: 2rem;
        border-radius: var(--radius);
      }

      .header-icon {
        width: 3rem;
        height: 3rem;
        background-color: var(--primary);
        border-radius: var(--radius);
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .header-title {
        font-size: 2.5rem;
        font-weight: 700;
        line-height: 1;
      }

      .header-description {
        margin-left: auto;
        font-size: 0.875rem;
        color: var(--muted-foreground);
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
      }

      .stat-card {
        background-color: var(--card);
        border: 2px solid var(--pop);
        border-radius: var(--radius);
        overflow: hidden;
      }

      .stat-header {
        padding: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .stat-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
      }

      .stat-content {
        padding: 1.5rem;
        background-color: var(--accent);
        position: relative;
      }

      .stat-value {
        font-size: 2.5rem;
        font-weight: bold;
        line-height: 1;
        margin-bottom: 0.5rem;
      }

      .stat-description {
        font-size: 0.875rem;
        color: var(--muted-foreground);
        font-weight: 500;
        letter-spacing: 0.05em;
      }

      .bullet {
        width: 0.5rem;
        height: 0.5rem;
        background-color: var(--primary);
        border-radius: 50%;
      }

      .icon {
        width: 1.25rem;
        height: 1.25rem;
        fill: currentColor;
      }

      .chart-section {
        background-color: var(--card);
        border: 2px solid var(--pop);
        border-radius: var(--radius);
        padding: 1.5rem;
        margin-bottom: 2rem;
      }

      .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
        gap: 1rem;
      }

      .chart-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.125rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
      }

      .time-controls {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
      }

      .time-btn {
        padding: 0.5rem 1rem;
        background: transparent;
        border: 1px solid var(--border);
        color: var(--muted-foreground);
        cursor: pointer;
        border-radius: var(--radius);
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        transition: all 0.3s ease;
      }

      .time-btn:hover {
        background-color: var(--accent);
        border-color: var(--primary);
      }

      .time-btn.active {
        background-color: var(--primary);
        color: var(--primary-foreground);
        border-color: var(--primary);
      }

      .chart-container {
        background-color: var(--accent);
        border-radius: var(--radius);
        padding: 1.5rem;
        height: 500px;
        position: relative;
      }

      .custom-range {
        display: none;
        gap: 1rem;
        align-items: center;
        margin-top: 1rem;
        flex-wrap: wrap;
      }

      .custom-range.show {
        display: flex;
      }

      .custom-range input {
        padding: 0.5rem;
        background-color: var(--background);
        border: 1px solid var(--border);
        border-radius: var(--radius);
        color: var(--foreground);
        font-size: 0.875rem;
      }

      .custom-range button {
        padding: 0.5rem 1rem;
        background-color: var(--primary);
        color: var(--primary-foreground);
        border: none;
        border-radius: var(--radius);
        cursor: pointer;
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        transition: opacity 0.3s ease;
      }

      .custom-range button:hover {
        opacity: 0.8;
      }

      .status-indicator {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        margin-bottom: 1rem;
      }

      .status-dot {
        width: 0.75rem;
        height: 0.75rem;
        border-radius: 50%;
        background-color: var(--success);
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0%,
        100% {
          opacity: 1;
          transform: scale(1);
        }
        50% {
          opacity: 0.7;
          transform: scale(1.05);
        }
      }

      .alert-status {
        background-color: var(--destructive);
      }

      .warning-status {
        background-color: var(--warning);
      }

      .tooltip {
        position: absolute;
        background-color: var(--background);
        border: 1px solid var(--border);
        border-radius: var(--radius);
        padding: 0.75rem;
        font-size: 0.875rem;
        z-index: 1000;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .monitoring-info {
        background-color: var(--card);
        border: 2px solid var(--pop);
        border-radius: var(--radius);
        padding: 1.5rem;
        margin-bottom: 50px;
      }

      .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
      }

      .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: var(--accent);
        border-radius: var(--radius);
      }

      .info-label {
        font-size: 0.875rem;
        color: var(--muted-foreground);
        text-transform: uppercase;
        font-weight: 500;
      }

      .info-value {
        font-weight: 600;
        font-size: 1rem;
      }

      .media-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
      }

      .media-card {
        background-color: var(--card);
        border: 2px solid var(--pop);
        border-radius: var(--radius);
        overflow: hidden;
      }

      .media-header {
        padding: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background-color: var(--accent);
      }

      .media-content {
        padding: 1.5rem;
        text-align: center;
      }

      .media-placeholder {
        width: 100%;
        height: 250px;
        background: linear-gradient(135deg, var(--accent), var(--background));
        border: 2px dashed var(--border);
        border-radius: var(--radius);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: var(--muted-foreground);
        font-size: 0.875rem;
        gap: 0.5rem;
        transition: all 0.3s ease;
      }

      .media-placeholder:hover {
        border-color: var(--primary);
        background: linear-gradient(135deg, var(--accent), var(--primary) / 5%);
      }

      .media-timestamp {
        margin-top: 1rem;
        font-size: 0.75rem;
        color: var(--muted-foreground);
      }

      @media (max-width: 768px) {
        .header1 {
          flex-direction: column;
          text-align: center;
        }

        .header-title {
          font-size: 1.875rem;
        }

        .chart-header {
          flex-direction: column;
          align-items: stretch;
        }

        .time-controls {
          justify-content: center;
        }

        .custom-range {
          flex-direction: column;
          align-items: stretch;
        }

        .chart-container {
          height: 400px;
        }

        .media-section {
          grid-template-columns: 1fr;
        }
      }
      header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
        background: rgba(0, 0, 0, 0.2);
        backdrop-filter: blur(12px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 2rem;
        max-width: 1200px;
        margin: 0 auto;
      }

      .logo {
        font-size: 1.5rem;
        font-weight: 800;
        text-decoration: none;
        color: #3b82f6;
      }

      .nav {
        display: flex;
        gap: 2rem;
      }

      .nav-link {
        text-decoration: none;
        color: #3b82f6;
        font-weight: 500;
        transition: color 0.3s ease;
      }

      .nav-link:hover {
        color: #60a5fa;
      }

      .cta-button {
        background: black;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 0.5rem;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s ease;
      }

      .cta-button:hover {
        background: #2563eb;
      }

      .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: var(--muted-foreground);
      }

      .empty-state h3 {
        margin: 1rem 0 0.5rem;
        color: var(--foreground);
      }
      footer {
        background: #1f2937;
        color: white;
        padding: 3rem 0;
      }

      .footer-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 2rem;
      }

      .footer-section h3,
      .footer-section h4 {
        margin-bottom: 1rem;
      }

      .footer-section p,
      .footer-section li {
        color: #9ca3af;
        margin-bottom: 0.5rem;
      }

      .footer-section ul {
        list-style: none;
      }

      .footer-section a {
        color: #9ca3af;
        text-decoration: none;
        transition: color 0.3s ease;
      }

      .footer-section a:hover {
        color: white;
      }

      .social-icons {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
      }

      .social-icon {
        width: 40px;
        height: 40px;
        background: #3b82f6;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.3s ease;
      }

      .social-icon:hover {
        background: #2563eb;
      }

      .footer-bottom {
        border-top: 1px solid #374151;
        margin-top: 2rem;
        padding-top: 2rem;
        text-align: center;
        color: #9ca3af;
      }
       @import url("https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;500;600;700&display=swap");

      :root {
        --radius: 0.625rem;
        --background: oklch(0.2029 0.0037 345.62);
        --foreground: oklch(0.9851 0 0);
        --card: oklch(0.2029 0.0037 345.62);
        --card-foreground: oklch(0.9851 0 0);
        --primary: oklch(0.4703 0.2364 263.19);
        --primary-foreground: oklch(0.9851 0 0);
        --secondary: oklch(0.269 0 0);
        --muted: oklch(0.2393 0 0);
        --muted-foreground: oklch(0.708 0 0);
        --accent: oklch(0.9851 0 0 / 5%);
        --border: oklch(1 0 0 / 10%);
        --pop: oklch(0.9851 0 0 / 2.5%);
        --success: oklch(0.7775 0.2447 144.9);
        --warning: oklch(0.769 0.188 70.08);
        --destructive: oklch(0.5961 0.2006 36.48);
        --chart-3: oklch(0.769 0.188 70.08);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Roboto Mono", monospace;
        background-color: var(--muted);
        color: var(--foreground);
        line-height: 1.5;
        padding: 2rem;
      }

      .media-browser {
        background-color: var(--card);
        border: 2px solid var(--pop);
        border-radius: var(--radius);
        margin-bottom: 2rem;
        overflow: hidden;
        max-width: 1200px;
        margin: 0 auto;
      }

      .media-browser-header {
        padding: 1rem;
        background-color: var(--accent);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
      }

      .media-browser-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1.125rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
      }

      .bullet {
        width: 0.5rem;
        height: 0.5rem;
        background-color: var(--chart-3);
        border-radius: 50%;
      }

      .media-type-selector {
        display: flex;
        gap: 0.5rem;
      }

      .media-type-btn {
        padding: 0.5rem 1rem;
        background: transparent;
        border: 1px solid var(--border);
        color: var(--muted-foreground);
        cursor: pointer;
        border-radius: var(--radius);
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .media-type-btn:hover {
        background-color: var(--accent);
        border-color: var(--primary);
      }

      .media-type-btn.active {
        background-color: var(--primary);
        color: var(--primary-foreground);
        border-color: var(--primary);
      }

      .media-controls {
        padding: 1rem;
        background-color: var(--background);
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
      }

      .media-time-controls {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
      }

      .time-btn {
        padding: 0.5rem 1rem;
        background: transparent;
        border: 1px solid var(--border);
        color: var(--muted-foreground);
        cursor: pointer;
        border-radius: var(--radius);
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        transition: all 0.3s ease;
      }

      .time-btn:hover {
        background-color: var(--accent);
        border-color: var(--primary);
      }

      .time-btn.active {
        background-color: var(--primary);
        color: var(--primary-foreground);
        border-color: var(--primary);
      }

      .date-filter {
        display: flex;
        gap: 0.5rem;
        align-items: center;
      }

      .date-filter input {
        padding: 0.5rem;
        background-color: var(--accent);
        border: 1px solid var(--border);
        border-radius: var(--radius);
        color: var(--foreground);
        font-size: 0.75rem;
      }

      .media-content {
        padding: 1.5rem;
        min-height: 400px;
      }

      .breadcrumb {
        margin-bottom: 1rem;
        font-size: 0.875rem;
        color: var(--muted-foreground);
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }

      .breadcrumb-item {
        cursor: pointer;
        transition: color 0.3s ease;
      }

      .breadcrumb-item:hover {
        color: var(--primary);
      }

      .breadcrumb-separator {
        color: var(--border);
      }

      .back-button {
        background-color: var(--secondary);
        color: var(--foreground);
        border: none;
        border-radius: var(--radius);
        padding: 0.5rem 1rem;
        cursor: pointer;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        transition: background-color 0.3s ease;
        margin-bottom: 1rem;
        display: none;
      }

      .back-button:hover {
        background-color: var(--primary);
      }

      .media-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        max-height: 400px;
        overflow-y: auto;
      }

      .folder-item, .media-item {
        background-color: var(--accent);
        border: 1px solid var(--border);
        border-radius: var(--radius);
        padding: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        position: relative;
      }

      .folder-item:hover, .media-item:hover {
        border-color: var(--primary);
        background-color: var(--primary);
        background-color: oklch(0.4703 0.2364 263.19 / 0.1);
      }

      .folder-item.selected, .media-item.selected {
        border-color: var(--primary);
        background-color: oklch(0.4703 0.2364 263.19 / 0.15);
      }

      .folder-thumbnail, .media-thumbnail {
        width: 100%;
        height: 120px;
        background: linear-gradient(135deg, var(--background), var(--muted));
        border: 2px dashed var(--border);
        border-radius: var(--radius);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: var(--muted-foreground);
        font-size: 0.75rem;
        gap: 0.5rem;
      }

      .folder-item .folder-thumbnail {
        background: linear-gradient(135deg, var(--warning), oklch(0.769 0.188 70.08 / 0.2));
        border-color: var(--warning);
        color: var(--warning);
      }

      .folder-date, .media-timestamp {
        font-size: 0.75rem;
        color: var(--muted-foreground);
        text-align: center;
        font-weight: 500;
      }

      .folder-count {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background-color: var(--primary);
        color: var(--primary-foreground);
        border-radius: 50%;
        width: 1.5rem;
        height: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.625rem;
        font-weight: 600;
      }

      .media-preview {
        background-color: var(--background);
        border-radius: var(--radius);
        padding: 2rem;
        text-align: center;
        margin-top: 1rem;
      }

      .media-preview-placeholder {
        width: 100%;
        max-width: 600px;
        height: 300px;
        background: linear-gradient(135deg, var(--accent), var(--background));
        border: 2px dashed var(--border);
        border-radius: var(--radius);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: var(--muted-foreground);
        font-size: 1rem;
        gap: 1rem;
        margin: 0 auto;
      }

      .empty-state {
        grid-column: 1 / -1;
        text-align: center;
        padding: 3rem 1rem;
        color: var(--muted-foreground);
      }

      .empty-state h3 {
        margin: 1rem 0 0.5rem;
        color: var(--foreground);
      }

      @media (max-width: 768px) {
        .media-grid {
          grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
          max-height: 300px;
        }
    </style>
  </head>
  <body>
    <header class="header">
      <div class="header-container">
        <a href="/" class="logo" style="color: white">VLSIFLOW</a>
        <nav class="nav">
          <a href="/about" class="nav-link" style="color: white">About Us</a>
          <a href="/real_time" class="nav-link" style="color: white"
            >Real-Time Data
          </a>
          <a href="/addmachine" class="nav-link" style="color: white"
            >Add Machine</a
          >
          <a href="/view_machine" class="nav-link" style="color: white"
            >View Machines</a
          >
        </nav>
        <button class="cta-button">Let's Talk</button>
      </div>
    </header>
    <div class="container">
      <!-- Header -->
      <div class="header1">
        <div class="header-icon">
          <svg
            class="icon"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M3 6h18l-2 13H5L3 6z" />
            <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" />
            <path d="M3 6l1.5 2.5" />
          </svg>
        </div>
        <div>
          <h1 class="header-title">Water Level & Rainfall Monitor</h1>
          <p class="stat-description">
            Real-time monitoring system with rainfall data
          </p>
        </div>
        <div class="header-description">
          <div class="status-indicator">
            <div class="status-dot"></div>
            Connected - Last updated: <span id="lastUpdate">--:--</span>
          </div>
          <div class="machine-name" style="margin-bottom: 10px">
            Machine - Kamand
          </div>
        </div>
      </div>

      <!-- Stats Grid -->
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-title">
              <div
                class="bullet"
                style="background-color: var(--chart-1)"
              ></div>
              Current Depth
            </div>
            <svg
              class="icon"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path d="M12 2v20M2 12l10-10 10 10" />
            </svg>
          </div>
          <div class="stat-content">
            <div
              class="stat-value"
              id="currentLevel"
              style="color: var(--chart-1)"
            >
              2.375m
            </div>
            <div class="stat-description">CURRENT DEPTH</div>
          </div>
        </div>

        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-title">
              <div
                class="bullet"
                style="background-color: var(--success)"
              ></div>
              Velocity
            </div>
            <svg
              class="icon"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2" />
              <circle cx="8.5" cy="7" r="4" />
              <path d="M20 8v6M23 11l-3 3-3-3" />
            </svg>
          </div>
          <div class="stat-content">
            <div
              class="stat-value"
              id="averageLevel"
              style="color: var(--success)"
            >
              2.341m
            </div>
            <div class="stat-description">24H AVERAGE</div>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-title">
              <div
                class="bullet"
                style="background-color: var(--success)"
              ></div>
              Battery Health
            </div>
            <svg
              class="icon"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2" />
              <circle cx="8.5" cy="7" r="4" />
              <path d="M20 8v6M23 11l-3 3-3-3" />
            </svg>
          </div>
          <div class="stat-content">
            <div
              class="stat-value"
              id="batteryHealth"
              style="color: var(--success)"
            >
              100%
            </div>
            <div class="stat-description">BATTERY LEVEL</div>
          </div>
        </div>

        <div class="stat-card">
          <div class="stat-header">
            <div class="stat-title">
              <div
                class="bullet"
                style="background-color: var(--destructive)"
              ></div>
              Current Status
            </div>
            <svg
              class="icon"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"
              />
              <line x1="12" y1="9" x2="12" y2="13" />
              <line x1="12" y1="17" x2="12.01" y2="17" />
            </svg>
          </div>
          <div class="stat-content">
            <div
              class="stat-value"
              id="currentStatus"
              style="color: var(--destructive)"
            >
              NORMAL
            </div>
            <div class="stat-description">MONITORING STATUS</div>
          </div>
        </div>
      </div>

      <!-- River Depth Chart Section -->
      <div class="chart-section">
        <div class="chart-header">
          <div class="chart-title">
            <div class="bullet"></div>
            River Depth Analysis
          </div>
          <div class="time-controls" id="depthTimeControls">
            <button class="time-btn" onclick="setTimeRange('depth', '1h')">
              1 Hour
            </button>
            <button
              class="time-btn active"
              onclick="setTimeRange('depth', '1d')"
            >
              1 Day
            </button>
            <button class="time-btn" onclick="setTimeRange('depth', '1w')">
              1 Week
            </button>
            <button class="time-btn" onclick="setTimeRange('depth', '1m')">
              1 Month
            </button>
            <button class="time-btn" onclick="toggleCustomRange('depth')">
              Custom Range
            </button>
          </div>
        </div>

        <div class="custom-range" id="depthCustomRange">
          <label>From:</label>
          <input type="datetime-local" id="depthStartDate" />
          <label>To:</label>
          <input type="datetime-local" id="depthEndDate" />
          <button onclick="applyCustomRange('depth')">Apply Range</button>
        </div>

        <div class="chart-container">
          <canvas id="depthChart"></canvas>
        </div>

        <div
          style="
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 1rem;
            font-size: 0.75rem;
            color: var(--muted-foreground);
          "
        >
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 3px;
                background: var(--warning);
                border-radius: 2px;
              "
            ></div>
            Critical Level (3.0m)
          </div>
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 3px;
                background: var(--destructive);
                border-radius: 2px;
              "
            ></div>
            Alert Level (3.5m)
          </div>
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 3px;
                background: var(--chart-1);
                border-radius: 2px;
              "
            ></div>
            Current Depth
          </div>
        </div>
      </div>

      <!-- Rainfall Chart Section -->
      <div class="chart-section">
        <div class="chart-header">
          <div class="chart-title">
            <div class="bullet" style="background-color: var(--chart-2)"></div>
            Rainfall Analysis
          </div>
          <div class="time-controls" id="rainfallTimeControls">
            <button class="time-btn" onclick="setTimeRange('rainfall', '1h')">
              1 Hour
            </button>
            <button
              class="time-btn active"
              onclick="setTimeRange('rainfall', '1d')"
            >
              1 Day
            </button>
            <button class="time-btn" onclick="setTimeRange('rainfall', '1w')">
              1 Week
            </button>
            <button class="time-btn" onclick="setTimeRange('rainfall', '1m')">
              1 Month
            </button>
            <button class="time-btn" onclick="toggleCustomRange('rainfall')">
              Custom Range
            </button>
          </div>
        </div>

        <div class="custom-range" id="rainfallCustomRange">
          <label>From:</label>
          <input type="datetime-local" id="rainfallStartDate" />
          <label>To:</label>
          <input type="datetime-local" id="rainfallEndDate" />
          <button onclick="applyCustomRange('rainfall')">Apply Range</button>
        </div>

        <div class="chart-container">
          <canvas id="rainfallChart"></canvas>
        </div>

        <div
          style="
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 1rem;
            font-size: 0.75rem;
            color: var(--muted-foreground);
          "
        >
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 12px;
                background: var(--chart-2);
                border-radius: 2px;
              "
            ></div>
            Rainfall Intensity (mm/h)
          </div>
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 3px;
                background: var(--warning);
                border-radius: 2px;
              "
            ></div>
            Heavy Rain Threshold (10mm/h)
          </div>
        </div>
      </div>

      <!-- Velocity Profile Chart Section -->
      <div class="chart-section">
        <div class="chart-header">
          <div class="chart-title">
            <div class="bullet" style="background-color: var(--chart-4)"></div>
            River Velocity Profile
          </div>
          <div class="time-controls" id="velocityTimeControls">
            <button class="time-btn" onclick="setTimeRange('velocity', '1h')">
              1 Hour
            </button>
            <button
              class="time-btn active"
              onclick="setTimeRange('velocity', '1d')"
            >
              1 Day
            </button>
            <button class="time-btn" onclick="setTimeRange('velocity', '1w')">
              1 Week
            </button>
            <button class="time-btn" onclick="setTimeRange('velocity', '1m')">
              1 Month
            </button>
            <button class="time-btn" onclick="toggleCustomRange('velocity')">
              Custom Range
            </button>
          </div>
        </div>

        <div class="custom-range" id="velocityCustomRange">
          <label>From:</label>
          <input type="datetime-local" id="velocityStartDate" />
          <label>To:</label>
          <input type="datetime-local" id="velocityEndDate" />
          <button onclick="applyCustomRange('velocity')">Apply Range</button>
        </div>

        <div class="chart-container">
          <canvas id="velocityChart"></canvas>
        </div>

        <div
          style="
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 1rem;
            font-size: 0.75rem;
            color: var(--muted-foreground);
          "
        >
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 3px;
                background: var(--chart-4);
                border-radius: 2px;
              "
            ></div>
            Surface Velocity (m/s)
          </div>
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 3px;
                background: var(--chart-5);
                border-radius: 2px;
              "
            ></div>
            Average Velocity (m/s)
          </div>
          <div style="display: flex; align-items: center; gap: 0.5rem">
            <div
              style="
                width: 12px;
                height: 3px;
                background: var(--destructive);
                border-radius: 2px;
              "
            ></div>
            Critical Velocity (2.5 m/s)
          </div>
        </div>
      </div>

      <!-- Media Archive Browser -->
      <div class="media-browser">
        <div class="media-browser-header">
          <div class="media-browser-title">
            <div class="bullet"></div>
            Media Archive Browser
          </div>
          <div class="media-type-selector">
            <button class="media-type-btn active" id="photosBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                <circle cx="9" cy="9" r="2" />
                <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />
              </svg>
              Photos
            </button>
            <button class="media-type-btn" id="videosBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <polygon points="23 7 16 12 23 17 23 7" />
                <rect x="1" y="5" width="15" height="14" rx="2" ry="2" />
              </svg>
              Videos
            </button>
          </div>
        </div>

        <div class="media-controls">
          <div class="media-time-controls">
            <button class="time-btn active" data-range="today">Today</button>
            <button class="time-btn" data-range="week">This Week</button>
            <button class="time-btn" data-range="month">This Month</button>
            <button class="time-btn" data-range="all">All Time</button>
            <div class="date-filter">
              <input type="date" id="mediaDateStart" placeholder="From" />
              <input type="date" id="mediaDateEnd" placeholder="To" />
              <button class="time-btn" id="filterBtn">Filter</button>
            </div>
          </div>
        </div>

        <div class="media-content">
          <div class="breadcrumb" id="breadcrumb">
            <span class="breadcrumb-item">Home</span>
          </div>

          <button class="back-button" id="backButton">← Back to Folders</button>

          <div class="media-grid" id="mediaGrid"></div>

          <div class="media-preview" id="mediaPreview">
            <div class="media-preview-placeholder">
              <svg
                width="64"
                height="64"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2" />
                <circle cx="9" cy="9" r="2" />
                <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />
              </svg>
              <h3>Select media to preview</h3>
              <p>
                Choose a photo or video from the archive above to view it here
              </p>
            </div>
          </div>
        </div>
      </div>
      <!-- Monitoring Info -->
      <div class="monitoring-info">
        <div class="chart-title" style="margin-bottom: 1rem">
          <div class="bullet"></div>
          System Information
        </div>
        <div class="info-grid">
          <div class="info-item">
            <span class="info-label">Update Interval</span>
            <span class="info-value">5 minutes</span>
          </div>
          <div class="info-item">
            <span class="info-label">Alert Threshold</span>
            <span class="info-value">3.0m</span>
          </div>
          <div class="info-item">
            <span class="info-label">Critical Level</span>
            <span class="info-value">3.5m</span>
          </div>
          <div class="info-item">
            <span class="info-label">Camera Status</span>
            <span class="info-value" style="color: var(--success)">Online</span>
          </div>
          <div class="info-item">
            <span class="info-label">Storage Used</span>
            <span class="info-value">2.3GB / 32GB</span>
          </div>
          <div class="info-item">
            <span class="info-label">Rain Sensor</span>
            <span class="info-value" style="color: var(--success)">Active</span>
          </div>
        </div>
      </div>
    </div>

    <footer>
      <div class="footer-container" style="margin: 0">
        <div class="footer-section">
          <div
            style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
              margin-bottom: 1rem;
            "
          >
            <svg
              style="width: 24px; height: 24px"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 10V3L4 14h7v7l9-11h-7z"
              ></path>
            </svg>
            <h3>VLSIFLOW</h3>
          </div>
          <p>
            Advanced flood monitoring and early detection solutions for a safer
            tomorrow.
          </p>
        </div>

        <div class="footer-section">
          <h4>Quick Links</h4>
          <ul>
            <li><a href="index.html">Home</a></li>
            <li><a href="realtime.html">Real-Time Data</a></li>
            <li>
              <a href="#" onclick="alert('Login feature coming soon!')"
                >Login</a
              >
            </li>
            <li>
              <a href="#" onclick="alert('Sign up feature coming soon!')"
                >Sign Up</a
              >
            </li>
          </ul>
        </div>

        <div class="footer-section">
          <h4>Contact Info</h4>
          <ul>
            <li>📧 info@vlsiflow.com</li>
            <li>📞 +1 (555) 123-4567</li>
            <li>📍 123 Tech Street, Innovation City</li>
          </ul>
        </div>

        <div class="footer-section">
          <h4>Follow Us</h4>
          <div class="social-icons">
            <div class="social-icon">f</div>
            <div class="social-icon">t</div>
            <div class="social-icon">in</div>
          </div>
        </div>
      </div>

      <div class="footer-bottom">
        <p>
          &copy; 2024 VLSIFLOW. All rights reserved. Built with precision and
          care.
        </p>
      </div>
    </footer>

    <script>
      let depthChart, rainfallChart, velocityChart;
      let currentRanges = {
        depth: "1d",
        rainfall: "1d",
        velocity: "1d",
      };
      let allData = generateMockData();

      // Media archive variables
      let currentMediaTimeRange = "today";

      Chart.register(window["chartjs-plugin-annotation"]);

      // Add data downsampling function
      function downsampleData(data, maxPoints = 200) {
        if (data.length <= maxPoints) {
          return data;
        }

        const factor = Math.ceil(data.length / maxPoints);
        const downsampled = [];

        for (let i = 0; i < data.length; i += factor) {
          const chunk = data.slice(i, i + factor);

          if (chunk.length === 0) continue;

          // For depth/rainfall data (with x, y properties)
          if (chunk[0].hasOwnProperty("y")) {
            const avgY =
              chunk.reduce((sum, point) => sum + point.y, 0) / chunk.length;
            downsampled.push({
              x: chunk[Math.floor(chunk.length / 2)].x, // Use middle timestamp
              y: avgY,
            });
          }
          // For velocity data (with surface, average properties)
          else if (chunk[0].hasOwnProperty("surface")) {
            const avgSurface =
              chunk.reduce((sum, point) => sum + point.surface, 0) /
              chunk.length;
            const avgAverage =
              chunk.reduce((sum, point) => sum + point.average, 0) /
              chunk.length;
            downsampled.push({
              x: chunk[Math.floor(chunk.length / 2)].x,
              surface: avgSurface,
              average: avgAverage,
            });
          }
        }

        return downsampled;
      }

      // Generate mock media data
      function generateMockPhotos() {
        const photos = [];
        const now = new Date();

        for (let i = 0; i < 15; i++) {
          const daysAgo = Math.floor(Math.random() * 30);
          const timestamp = new Date(
            now.getTime() - daysAgo * 24 * 60 * 60 * 1000
          );

          photos.push({
            id: `photo_${i + 1}`,
            type: "photo",
            timestamp: timestamp,
            filename: `river_photo_${
              timestamp.toISOString().split("T")[0]
            }_${String(i + 1).padStart(3, "0")}.jpg`,
            size: (Math.random() * 3 + 1).toFixed(1) + "MB",
            description: `River monitoring photo captured at depth ${(
              2 + Math.random()
            ).toFixed(2)}m`,
          });
        }

        return photos.sort((a, b) => b.timestamp - a.timestamp);
      }

      function generateMockVideos() {
        const videos = [];
        const now = new Date();

        for (let i = 0; i < 8; i++) {
          const daysAgo = Math.floor(Math.random() * 30);
          const timestamp = new Date(
            now.getTime() - daysAgo * 24 * 60 * 60 * 1000
          );

          videos.push({
            id: `video_${i + 1}`,
            type: "video",
            timestamp: timestamp,
            filename: `river_video_${
              timestamp.toISOString().split("T")[0]
            }_${String(i + 1).padStart(3, "0")}.mp4`,
            duration: `${Math.floor(Math.random() * 120 + 30)}s`,
            size: (Math.random() * 30 + 20).toFixed(1) + "MB",
            description: `${Math.floor(
              Math.random() * 120 + 30
            )}-second monitoring clip with velocity analysis`,
          });
        }

        return videos.sort((a, b) => b.timestamp - a.timestamp);
      }

      // Generate mock data for different time ranges
      function generateMockData() {
        const data = { depth: {}, rainfall: {}, velocity: {} };
        const now = new Date();

        // Generate depth data
        ["1m", "1w", "1d", "1h"].forEach((range) => {
          const intervals = {
            "1m": { count: 30 * 24 * 4, interval: 15 * 60 * 1000 },
            "1w": { count: 7 * 24 * 4, interval: 15 * 60 * 1000 },
            "1d": { count: 24 * 4, interval: 15 * 60 * 1000 },
            "1h": { count: 4, interval: 15 * 60 * 1000 },
          };

          data.depth[range] = [];
          data.rainfall[range] = [];
          data.velocity[range] = [];

          for (let i = intervals[range].count; i >= 0; i--) {
            const date = new Date(
              now.getTime() - i * intervals[range].interval
            );

            const baseDepth = 2.3;
            const depthVariation = 1 + Math.random() * 0.3 - 0.15;
            data.depth[range].push({
              x: date,
              y: Math.max(0.5, Math.min(4.0, baseDepth + depthVariation)),
            });

            // Rainfall data (sporadic)
            const rainIntensity = Math.random() < 0.1 ? Math.random() * 15 : 0;
            data.rainfall[range].push({
              x: date,
              y: rainIntensity,
            });

            // Velocity data
            const baseSurfaceVel = 1.2;
            const baseAvgVel = 0.8;
            const velVariation = Math.random() * 0.2 - 0.1;
            data.velocity[range].push({
              surface: Math.max(
                0,
                Math.min(3.0, baseSurfaceVel + velVariation)
              ),
              average: Math.max(
                0,
                Math.min(2.5, baseAvgVel + velVariation * 0.7)
              ),
              x: date,
            });
          }
        });

        return data;
      }

      // Initialize all charts
      function initCharts() {
        initDepthChart();
        initRainfallChart();
        initVelocityChart();
        updateStats();
        updateLastUpdateTime();
        updateDataPointsCount();
        updateMediaGrid();
      }

      // Initialize depth chart
      function initDepthChart() {
        const ctx = document.getElementById("depthChart").getContext("2d");

        const rawData = allData.depth[currentRanges.depth];
        const downsampledData = downsampleData(rawData, 144);

        depthChart = new Chart(ctx, {
          type: "line",
          data: {
            datasets: [
              {
                label: "River Depth",
                data: downsampledData,
                borderColor: "oklch(0.488 0.243 264.376)",
                backgroundColor: "oklch(0.488 0.243 264.376 / 0.1)",
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointRadius: 0,
                pointHoverRadius: 0,
              },
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: "index",
            },
            plugins: {
              legend: { display: false },
              tooltip: {
                backgroundColor: "oklch(0.2029 0.0037 345.62)",
                titleColor: "oklch(0.9851 0 0)",
                bodyColor: "oklch(0.9851 0 0)",
                borderColor: "oklch(1 0 0 / 10%)",
                borderWidth: 1,
                displayColors: false,
                callbacks: {
                  title: function (context) {
                    return new Date(context[0].parsed.x).toLocaleString();
                  },
                  label: function (context) {
                    return `Depth: ${context.parsed.y.toFixed(3)}m`;
                  },
                },
              },
              annotation: {
                annotations: {
                  alertLine: {
                    type: "line",
                    yMin: 3.0,
                    yMax: 3.0,
                    borderColor: "oklch(0.769 0.188 70.08)",
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      content: "Alert Level",
                      enabled: true,
                      position: "end",
                    },
                  },
                  criticalLine: {
                    type: "line",
                    yMin: 3.5,
                    yMax: 3.5,
                    borderColor: "oklch(0.5961 0.2006 36.48)",
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      content: "Critical Level",
                      enabled: true,
                      position: "end",
                    },
                  },
                },
              },
            },
            scales: {
              x: {
                type: "time",
                time: {
                  displayFormats: {
                    minute: "HH:mm",
                    hour: "HH:mm",
                    day: "MM/dd",
                    week: "MM/dd",
                    month: "MM/dd",
                  },
                },
                grid: {
                  color: "oklch(0.708 0 0 / 0.1)",
                  drawBorder: false,
                },
                ticks: {
                  color: "oklch(0.708 0 0)",
                  maxRotation: 45,
                  minRotation: 45,
                },
              },
              y: {
                beginAtZero: false,
                grid: {
                  color: "oklch(0.708 0 0 / 0.1)",
                  drawBorder: false,
                },
                ticks: {
                  color: "oklch(0.708 0 0)",
                  callback: function (value) {
                    return value.toFixed(1) + "m";
                  },
                },
                title: {
                  display: true,
                  text: "Depth (meters)",
                  color: "oklch(0.708 0 0)",
                },
              },
            },
          },
        });
      }

      // Initialize rainfall chart
      function initRainfallChart() {
        const ctx = document.getElementById("rainfallChart").getContext("2d");

        const rawData = allData.rainfall[currentRanges.rainfall];
        const downsampledData = downsampleData(rawData, 144);

        rainfallChart = new Chart(ctx, {
          type: "bar",
          data: {
            datasets: [
              {
                label: "Rainfall",
                data: downsampledData,
                backgroundColor: "oklch(0.696 0.17 162.48 / 0.8)",
                borderColor: "oklch(0.696 0.17 162.48)",
                borderWidth: 1,
                borderRadius: 4,
                borderSkipped: false,
              },
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: "index",
            },
            plugins: {
              legend: { display: false },
              tooltip: {
                backgroundColor: "oklch(0.2029 0.0037 345.62)",
                titleColor: "oklch(0.9851 0 0)",
                bodyColor: "oklch(0.9851 0 0)",
                borderColor: "oklch(1 0 0 / 10%)",
                borderWidth: 1,
                displayColors: false,
                callbacks: {
                  title: function (context) {
                    return new Date(context[0].parsed.x).toLocaleString();
                  },
                  label: function (context) {
                    return `Rainfall: ${context.parsed.y.toFixed(1)}mm/h`;
                  },
                },
              },
              annotation: {
                annotations: {
                  heavyRainLine: {
                    type: "line",
                    yMin: 10,
                    yMax: 10,
                    borderColor: "oklch(0.769 0.188 70.08)",
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      content: "Heavy Rain",
                      enabled: true,
                      position: "end",
                    },
                  },
                },
              },
            },
            scales: {
              x: {
                type: "time",
                time: {
                  displayFormats: {
                    minute: "HH:mm",
                    hour: "HH:mm",
                    day: "MM/dd",
                    week: "MM/dd",
                    month: "MM/dd",
                  },
                },
                grid: {
                  color: "oklch(0.708 0 0 / 0.1)",
                  drawBorder: false,
                },
                ticks: {
                  color: "oklch(0.708 0 0)",
                  maxRotation: 45,
                  minRotation: 45,
                },
              },
              y: {
                beginAtZero: true,
                grid: {
                  color: "oklch(0.708 0 0 / 0.1)",
                  drawBorder: false,
                },
                ticks: {
                  color: "oklch(0.708 0 0)",
                  callback: function (value) {
                    return value.toFixed(1) + "mm/h";
                  },
                },
                title: {
                  display: true,
                  text: "Rainfall (mm/hour)",
                  color: "oklch(0.708 0 0)",
                },
              },
            },
          },
        });
      }

      // Initialize velocity chart
      function initVelocityChart() {
        const ctx = document.getElementById("velocityChart").getContext("2d");

        const rawData = allData.velocity[currentRanges.velocity];
        const downsampledData = downsampleData(rawData, 144);

        velocityChart = new Chart(ctx, {
          type: "line",
          data: {
            datasets: [
              {
                label: "Average Velocity",
                data: downsampledData.map((d) => ({ x: d.x, y: d.average })),
                borderColor: "oklch(0.55 0.22 180)",
                backgroundColor: "oklch(0.55 0.22 180 / 0.1)",
                borderWidth: 3,
                fill: false,
                tension: 0.4,
                pointRadius: 0,
                pointHoverRadius: 0,
              },
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: "index",
            },
            plugins: {
              legend: { display: false },
              tooltip: {
                backgroundColor: "oklch(0.2029 0.0037 345.62)",
                titleColor: "oklch(0.9851 0 0)",
                bodyColor: "oklch(0.9851 0 0)",
                borderColor: "oklch(1 0 0 / 10%)",
                borderWidth: 1,
                displayColors: true,
                callbacks: {
                  title: function (context) {
                    return new Date(context[0].parsed.x).toLocaleString();
                  },
                  label: function (context) {
                    return `${
                      context.dataset.label
                    }: ${context.parsed.y.toFixed(2)}m/s`;
                  },
                },
              },
              annotation: {
                annotations: {
                  criticalVelLine: {
                    type: "line",
                    yMin: 2.5,
                    yMax: 2.5,
                    borderColor: "oklch(0.5961 0.2006 36.48)",
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      content: "Critical Velocity",
                      enabled: true,
                      position: "end",
                    },
                  },
                },
              },
            },
            scales: {
              x: {
                type: "time",
                time: {
                  displayFormats: {
                    minute: "HH:mm",
                    hour: "HH:mm",
                    day: "MM/dd",
                    week: "MM/dd",
                    month: "MM/dd",
                  },
                },
                grid: {
                  color: "oklch(0.708 0 0 / 0.1)",
                  drawBorder: false,
                },
                ticks: {
                  color: "oklch(0.708 0 0)",
                  maxRotation: 45,
                  minRotation: 45,
                },
              },
              y: {
                beginAtZero: true,
                grid: {
                  color: "oklch(0.708 0 0 / 0.1)",
                  drawBorder: false,
                },
                ticks: {
                  color: "oklch(0.708 0 0)",
                  callback: function (value) {
                    return value.toFixed(1) + "m/s";
                  },
                },
                title: {
                  display: true,
                  text: "Velocity (m/s)",
                  color: "oklch(0.708 0 0)",
                },
              },
            },
          },
        });
      }

      // Set time range for specific chart with downsampling
      function setTimeRange(chartType, range) {
        currentRanges[chartType] = range;

        // Update active button
        const timeControls = document.getElementById(
          `${chartType}TimeControls`
        );
        timeControls.querySelectorAll(".time-btn").forEach((btn) => {
          btn.classList.remove("active");
        });
        event.target.classList.add("active");

        // Hide custom range
        document
          .getElementById(`${chartType}CustomRange`)
          .classList.remove("show");

        // Define max points based on time range
        const maxPointsConfig = {
          "1h": 60, // Show all points for 1 hour
          "1d": 144, // Reduce to ~144 points for 1 day
          "1w": 168, // Reduce to ~168 points for 1 week
          "1m": 200,
        };

        const maxPoints = maxPointsConfig[range] || 200;

        // Update chart data with downsampling
        if (chartType === "depth") {
          const rawData = allData.depth[range];
          const downsampledData = downsampleData(rawData, maxPoints);
          depthChart.data.datasets[0].data = downsampledData;
          depthChart.update();
        } else if (chartType === "rainfall") {
          const rawData = allData.rainfall[range];
          const downsampledData = downsampleData(rawData, maxPoints);
          rainfallChart.data.datasets[0].data = downsampledData;
          rainfallChart.update();
        } else if (chartType === "velocity") {
          const rawData = allData.velocity[range];
          const downsampledData = downsampleData(rawData, maxPoints);

          velocityChart.data.datasets[0].data = downsampledData.map((d) => ({
            x: d.x,
            y: d.surface,
          }));
          velocityChart.update();
        }

        updateStats();
        updateDataPointsCount();
      }

      // Toggle custom range
      function toggleCustomRange(chartType) {
        const customRange = document.getElementById(`${chartType}CustomRange`);
        customRange.classList.toggle("show");

        const now = new Date();
        const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);

        document.getElementById(`${chartType}StartDate`).value = yesterday
          .toISOString()
          .slice(0, 16);
        document.getElementById(`${chartType}EndDate`).value = now
          .toISOString()
          .slice(0, 16);

        const timeControls = document.getElementById(
          `${chartType}TimeControls`
        );
        timeControls.querySelectorAll(".time-btn").forEach((btn) => {
          btn.classList.remove("active");
        });
        event.target.classList.add("active");
      }

      // Apply custom range with proper data filtering and downsampling
      function applyCustomRange(chartType) {
        const startDate = new Date(
          document.getElementById(`${chartType}StartDate`).value
        );
        const endDate = new Date(
          document.getElementById(`${chartType}EndDate`).value
        );

        if (startDate >= endDate) {
          alert("Start date must be before end date");
          return;
        }

        // Filter data from the largest dataset (1m) for most granular data
        const maxPoints = 200; // For custom ranges, limit to 200 points

        if (chartType === "depth") {
          const filteredData = allData.depth["1m"].filter((point) => {
            const pointDate = new Date(point.x);
            return pointDate >= startDate && pointDate <= endDate;
          });

          if (filteredData.length === 0) {
            alert("No data found in selected date range");
            return;
          }

          const downsampledData = downsampleData(filteredData, maxPoints);
          depthChart.data.datasets[0].data = downsampledData;
          depthChart.update();
        } else if (chartType === "rainfall") {
          const filteredData = allData.rainfall["1m"].filter((point) => {
            const pointDate = new Date(point.x);
            return pointDate >= startDate && pointDate <= endDate;
          });

          if (filteredData.length === 0) {
            alert("No data found in selected date range");
            return;
          }

          const downsampledData = downsampleData(filteredData, maxPoints);
          rainfallChart.data.datasets[0].data = downsampledData;
          rainfallChart.update();
        } else if (chartType === "velocity") {
          const filteredData = allData.velocity["1m"].filter((point) => {
            const pointDate = new Date(point.x);
            return pointDate >= startDate && pointDate <= endDate;
          });

          if (filteredData.length === 0) {
            alert("No data found in selected date range");
            return;
          }

          const downsampledData = downsampleData(filteredData, maxPoints);

          velocityChart.data.datasets[0].data = downsampledData.map((d) => ({
            x: d.x,
            y: d.surface,
          }));
          velocityChart.data.datasets[1].data = downsampledData.map((d) => ({
            x: d.x,
            y: d.average,
          }));
          velocityChart.update();
        }

        currentRanges[chartType] = "custom";
        updateStats();
        updateDataPointsCount();
      }

      // Update statistics
      function updateStats() {
        const currentDepthData = depthChart.data.datasets[0].data;
        const currentRainfallData = rainfallChart.data.datasets[0].data;

        if (currentDepthData.length === 0) return;

        const latestDepth = currentDepthData[currentDepthData.length - 1].y;
        const avgDepth =
          currentDepthData.reduce((sum, point) => sum + point.y, 0) /
          currentDepthData.length;

        document.getElementById("currentLevel").textContent =
          latestDepth.toFixed(3) + "m";
        document.getElementById("averageLevel").textContent =
          avgDepth.toFixed(3) + "m";

        // Update status
        const statusElement = document.getElementById("currentStatus");
        const statusDot = document.querySelector(".status-dot");

        if (latestDepth >= 3.5) {
          statusElement.textContent = "CRITICAL";
          statusElement.style.color = "var(--destructive)";
          statusDot.className = "status-dot alert-status";
        } else if (latestDepth >= 3.0) {
          statusElement.textContent = "WARNING";
          statusElement.style.color = "var(--warning)";
          statusDot.className = "status-dot warning-status";
        } else {
          statusElement.textContent = "NORMAL";
          statusElement.style.color = "var(--success)";
          statusDot.className = "status-dot";
        }
      }

      // Update data points count
      function updateDataPointsCount() {}

      // Update last update time
      function updateLastUpdateTime() {
        const now = new Date();
        document.getElementById("lastUpdate").textContent =
          now.toLocaleTimeString();
      }

      // Media functions
      let currentMediaType = "photos";
      let currentTimeRange = "today";
      let currentView = "folders"; // "folders" or "files"
      let selectedFolder = null;
      let selectedMediaItem = null;
      let mediaData = {
        photos: [],
        videos: [],
      };

      // Generate mock data
      function generateMockPhotos() {
        const photos = [];
        const now = new Date();

        // Generate photos for the last 30 days
        for (let i = 0; i < 60; i++) {
          const daysAgo = Math.floor(Math.random() * 30);
          const timestamp = new Date(
            now.getTime() -
              daysAgo * 24 * 60 * 60 * 1000 -
              Math.random() * 24 * 60 * 60 * 1000
          );

          photos.push({
            id: `photo_${i + 1}`,
            type: "photo",
            timestamp: timestamp,
            filename: `river_photo_${
              timestamp.toISOString().split("T")[0]
            }_${String(i + 1).padStart(3, "0")}.jpg`,
            size: (Math.random() * 3 + 1).toFixed(1) + "MB",
            description: `River monitoring photo captured at depth ${(
              2 + Math.random()
            ).toFixed(2)}m`,
          });
        }

        return photos.sort((a, b) => b.timestamp - a.timestamp);
      }

      function generateMockVideos() {
        const videos = [];
        const now = new Date();

        // Generate videos for the last 30 days
        for (let i = 0; i < 30; i++) {
          const daysAgo = Math.floor(Math.random() * 30);
          const timestamp = new Date(
            now.getTime() -
              daysAgo * 24 * 60 * 60 * 1000 -
              Math.random() * 24 * 60 * 60 * 1000
          );

          videos.push({
            id: `video_${i + 1}`,
            type: "video",
            timestamp: timestamp,
            filename: `river_video_${
              timestamp.toISOString().split("T")[0]
            }_${String(i + 1).padStart(3, "0")}.mp4`,
            duration: `${Math.floor(Math.random() * 120 + 30)}s`,
            size: (Math.random() * 30 + 20).toFixed(1) + "MB",
            description: `${Math.floor(
              Math.random() * 120 + 30
            )}-second monitoring clip with velocity analysis`,
          });
        }

        return videos.sort((a, b) => b.timestamp - a.timestamp);
      }

      // Filter media by time range
      function getFilteredMedia(customStart = null, customEnd = null) {
        const mediaArray = mediaData[currentMediaType];
        const now = new Date();

        if (customStart && customEnd) {
          return mediaArray.filter(
            (item) =>
              item.timestamp >= customStart && item.timestamp <= customEnd
          );
        }

        switch (currentTimeRange) {
          case "today":
            const startOfDay = new Date(
              now.getFullYear(),
              now.getMonth(),
              now.getDate()
            );
            return mediaArray.filter((item) => item.timestamp >= startOfDay);

          case "week":
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            return mediaArray.filter((item) => item.timestamp >= weekAgo);

          case "month":
            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            return mediaArray.filter((item) => item.timestamp >= monthAgo);

          case "all":
          default:
            return mediaArray;
        }
      }

      // Group media by date
      function groupMediaByDate(mediaArray) {
        const grouped = {};

        mediaArray.forEach((item) => {
          const dateStr = item.timestamp.toDateString();
          if (!grouped[dateStr]) {
            grouped[dateStr] = [];
          }
          grouped[dateStr].push(item);
        });

        return grouped;
      }

      // Update breadcrumb
      function updateBreadcrumb() {
        const breadcrumb = document.getElementById("breadcrumb");

        if (currentView === "folders") {
          breadcrumb.innerHTML = `
            <span class="breadcrumb-item">Home</span>
            <span class="breadcrumb-separator"> > </span>
            <span class="breadcrumb-item">${
              currentMediaType.charAt(0).toUpperCase() +
              currentMediaType.slice(1)
            } - ${
            currentTimeRange.charAt(0).toUpperCase() + currentTimeRange.slice(1)
          }</span>
          `;
        } else if (currentView === "files" && selectedFolder) {
          const date = new Date(selectedFolder);
          const formattedDate = date.toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
            day: "numeric",
          });

          breadcrumb.innerHTML = `
            <span class="breadcrumb-item" onclick="navigateToRoot()">Home</span>
            <span class="breadcrumb-separator"> > </span>
            <span class="breadcrumb-item" onclick="navigateToRoot()">${
              currentMediaType.charAt(0).toUpperCase() +
              currentMediaType.slice(1)
            }</span>
            <span class="breadcrumb-separator"> > </span>
            <span class="breadcrumb-item">${formattedDate}</span>
          `;
        }
      }

      // Update media grid
      function updateMediaGrid(customStart = null, customEnd = null) {
        const mediaGrid = document.getElementById("mediaGrid");
        const backButton = document.getElementById("backButton");

        if (currentView === "folders") {
          backButton.style.display = "none";

          const filteredMedia = getFilteredMedia(customStart, customEnd);
          const groupedMedia = groupMediaByDate(filteredMedia);

          if (Object.keys(groupedMedia).length === 0) {
            mediaGrid.innerHTML = `
              <div class="empty-state">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <path d="m9 9 3 3 3-3"/>
                </svg>
                <h3>No ${currentMediaType} found</h3>
                <p>No ${currentMediaType} available for the selected time range</p>
              </div>
            `;
            return;
          }

          // Sort dates in descending order (newest first)
          const sortedDates = Object.keys(groupedMedia).sort(
            (a, b) => new Date(b) - new Date(a)
          );

          mediaGrid.innerHTML = sortedDates
            .map((dateStr) => {
              const date = new Date(dateStr);
              const items = groupedMedia[dateStr];
              const formattedDate = date.toLocaleDateString("en-US", {
                weekday: "short",
                year: "numeric",
                month: "short",
                day: "numeric",
              });

              return `
              <div class="folder-item" onclick="openFolder('${dateStr}')">
                <div class="folder-thumbnail">
                  <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"/>
                  </svg>
                  <p style="font-weight: 600;">FOLDER</p>
                </div>
                <div class="folder-date">${formattedDate}</div>
                <div class="folder-count">${items.length}</div>
              </div>
            `;
            })
            .join("");
        } else if (currentView === "files" && selectedFolder) {
          backButton.style.display = "block";

          const filteredMedia = getFilteredMedia(customStart, customEnd);
          const groupedMedia = groupMediaByDate(filteredMedia);
          const folderMedia = groupedMedia[selectedFolder] || [];

          if (folderMedia.length === 0) {
            mediaGrid.innerHTML = `
              <div class="empty-state">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <path d="m9 9 3 3 3-3"/>
                </svg>
                <h3>No ${currentMediaType} found</h3>
                <p>No ${currentMediaType} in this folder</p>
              </div>
            `;
            return;
          }

          // Sort by timestamp (newest first)
          folderMedia.sort((a, b) => b.timestamp - a.timestamp);

          mediaGrid.innerHTML = folderMedia
            .map(
              (item) => `
            <div class="media-item" onclick="selectMediaItem('${
              item.id
            }')" id="media-${item.id}">
              <div class="media-thumbnail">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  ${
                    item.type === "photo"
                      ? '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><circle cx="9" cy="9" r="2"/><path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>'
                      : '<polygon points="23 7 16 12 23 17 23 7"/><rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>'
                  }
                </svg>
                <p>${item.type === "photo" ? "PHOTO" : "VIDEO"}</p>
                <p style="font-size: 0.6rem">${item.size}</p>
              </div>
              <div class="media-timestamp">
                ${item.timestamp.toLocaleTimeString([], {
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </div>
            </div>
          `
            )
            .join("");
        }
      }

      // Navigation functions
      function openFolder(dateStr) {
        selectedFolder = dateStr;
        currentView = "files";
        updateBreadcrumb();
        updateMediaGrid();
      }

      function navigateBack() {
        currentView = "folders";
        selectedFolder = null;
        updateBreadcrumb();
        updateMediaGrid();
      }

      function navigateToRoot() {
        currentView = "folders";
        selectedFolder = null;
        updateBreadcrumb();
        updateMediaGrid();
      }

      // Media item selection
      function selectMediaItem(itemId) {
        selectedMediaItem = itemId;

        // Update visual selection
        document.querySelectorAll(".media-item").forEach((item) => {
          item.classList.remove("selected");
        });
        const selectedElement = document.getElementById(`media-${itemId}`);
        if (selectedElement) {
          selectedElement.classList.add("selected");
        }

        // Find the item data
        const allMedia = [...mediaData.photos, ...mediaData.videos];
        const item = allMedia.find((m) => m.id === itemId);

        if (!item) return;

        // Update preview
        const preview = document.getElementById("mediaPreview");
        preview.innerHTML = `
          <div class="media-preview-placeholder">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              ${
                item.type === "photo"
                  ? '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"/><circle cx="9" cy="9" r="2"/><path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>'
                  : '<polygon points="23 7 16 12 23 17 23 7"/><rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>'
              }
            </svg>
            <h3>${item.filename}</h3>
            <p>${item.description}</p>
            <div style="margin-top: 1rem; font-size: 0.875rem; color: var(--muted-foreground);">
              <p><strong>Captured:</strong> ${item.timestamp.toLocaleString()}</p>
              <p><strong>Size:</strong> ${item.size}</p>
              ${
                item.duration
                  ? `<p><strong>Duration:</strong> ${item.duration}</p>`
                  : ""
              }
            </div>
            <div style="margin-top: 1rem; display: flex; gap: 1rem; justify-content: center;">
              <button class="time-btn" onclick="downloadMedia('${item.id}')">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                  <polyline points="7,10 12,15 17,10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
                Download
              </button>
              <button class="time-btn" onclick="deleteMedia('${
                item.id
              }')" style="background-color: var(--destructive); border-color: var(--destructive);">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6m3,0V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2v2"/>
                </svg>
                Delete
              </button>
            </div>
          </div>
        `;
      }

      // Media actions
      function downloadMedia(itemId) {
        const allMedia = [...mediaData.photos, ...mediaData.videos];
        const item = allMedia.find((m) => m.id === itemId);
        if (item) {
          alert(`Downloading ${item.filename}...`);
        }
      }

      function deleteMedia(itemId) {
        if (confirm("Are you sure you want to delete this media file?")) {
          // Remove from data
          mediaData.photos = mediaData.photos.filter(
            (item) => item.id !== itemId
          );
          mediaData.videos = mediaData.videos.filter(
            (item) => item.id !== itemId
          );

          // Update grid
          updateMediaGrid();

          // Clear preview if this item was selected
          if (selectedMediaItem === itemId) {
            selectedMediaItem = null;
            document.getElementById("mediaPreview").innerHTML = `
              <div class="media-preview-placeholder">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                  <circle cx="9" cy="9" r="2"/>
                  <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>
                </svg>
                <h3>Select media to preview</h3>
                <p>Choose a photo or video from the archive above to view it here</p>
              </div>
            `;
          }
        }
      }

      // Initialize
      function init() {
        // Generate mock data
        mediaData.photos = generateMockPhotos();
        mediaData.videos = generateMockVideos();

        // Set up event listeners
        document
          .getElementById("photosBtn")
          .addEventListener("click", () => switchMediaType("photos"));
        document
          .getElementById("videosBtn")
          .addEventListener("click", () => switchMediaType("videos"));
        document
          .getElementById("backButton")
          .addEventListener("click", navigateBack);
        document
          .getElementById("filterBtn")
          .addEventListener("click", applyDateFilter);

        // Time range buttons
        document.querySelectorAll("[data-range]").forEach((btn) => {
          btn.addEventListener("click", (e) => {
            const range = e.target.getAttribute("data-range");
            setTimeRange1(range);
          });
        });

        // Initialize display
        updateBreadcrumb();
        updateMediaGrid();
      }

      // Switch media type (photos/videos)
      function switchMediaType(type) {
        currentMediaType = type;
        currentView = "folders";
        selectedFolder = null;
        selectedMediaItem = null;

        // Update button states
        document
          .getElementById("photosBtn")
          .classList.toggle("active", type === "photos");
        document
          .getElementById("videosBtn")
          .classList.toggle("active", type === "videos");

        // Clear preview
        clearPreview();
        updateBreadcrumb();
        updateMediaGrid();
      }

      // Set time range
      function setTimeRange1(range) {
        currentTimeRange = range;
        currentView = "folders";
        selectedFolder = null;
        selectedMediaItem = null;

        // Update button states
        document.querySelectorAll("[data-range]").forEach((btn) => {
          btn.classList.remove("active");
        });
        document
          .querySelector(`[data-range="${range}"]`)
          .classList.add("active");

        // Clear preview
        clearPreview();
        updateBreadcrumb();
        updateMediaGrid();
      }

      // Apply date filter
      function applyDateFilter() {
        const startDate = document.getElementById("mediaDateStart").value;
        const endDate = document.getElementById("mediaDateEnd").value;

        if (startDate && endDate) {
          const start = new Date(startDate);
          const end = new Date(endDate);
          end.setHours(23, 59, 59, 999); // Include entire end date

          if (start >= end) {
            alert("Start date must be before end date");
            return;
          }

          currentTimeRange = "custom";
          currentView = "folders";
          selectedFolder = null;
          selectedMediaItem = null;

          // Update button states
          document.querySelectorAll("[data-range]").forEach((btn) => {
            btn.classList.remove("active");
          });

          // Clear preview
          clearPreview();
          updateBreadcrumb();
          updateMediaGrid(start, end);
        } else {
          alert("Please select both start and end dates");
        }
      }

      // Clear preview
      function clearPreview() {
        document.getElementById("mediaPreview").innerHTML = `
          <div class="media-preview-placeholder">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <circle cx="9" cy="9" r="2"/>
              <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"/>
            </svg>
            <h3>Select media to preview</h3>
            <p>Choose a photo or video from the archive above to view it here</p>
          </div>
        `;
      }

      // Make functions globally available
      window.openFolder = openFolder;
      window.navigateBack = navigateBack;
      window.navigateToRoot = navigateToRoot;
      window.selectMediaItem = selectMediaItem;
      window.downloadMedia = downloadMedia;
      window.deleteMedia = deleteMedia;

      // Initialize when DOM is loaded
      document.addEventListener("DOMContentLoaded", init);

      console.log(
        "Media Archive Browser with Date Folders initialized successfully!"
      );
      // Simulate real-time updates with downsampling awareness
      function simulateRealtimeUpdate() {
        const now = new Date();
        const baseDepth = 2.4;
        const depthVariation = Math.random() * 0.2 - 0.1;
        const rainIntensity = Math.random() < 0.05 ? Math.random() * 8 : 0;
        const baseSurfaceVel = 1.2;
        const baseAvgVel = 0.8;
        const velVariation = Math.random() * 0.15 - 0.075;

        const newDepthPoint = {
          x: now,
          y: Math.max(0.5, Math.min(4.0, baseDepth + depthVariation)),
        };

        const newRainfallPoint = {
          x: now,
          y: rainIntensity,
        };

        const newVelocityPoint = {
          x: now,
          surface: Math.max(0, Math.min(3.0, baseSurfaceVel + velVariation)),
          average: Math.max(0, Math.min(2.5, baseAvgVel + velVariation * 0.7)),
        };

        // Update charts if showing recent data
        if (currentRanges.depth === "1h" || currentRanges.depth === "1d") {
          depthChart.data.datasets[0].data.push(newDepthPoint);

          const maxPoints = currentRanges.depth === "1h" ? 60 : 144;
          if (depthChart.data.datasets[0].data.length > maxPoints) {
            depthChart.data.datasets[0].data.shift();
          }
          depthChart.update("none");
        }

        if (
          currentRanges.rainfall === "1h" ||
          currentRanges.rainfall === "1d"
        ) {
          rainfallChart.data.datasets[0].data.push(newRainfallPoint);

          const maxPoints = currentRanges.rainfall === "1h" ? 60 : 144;
          if (rainfallChart.data.datasets[0].data.length > maxPoints) {
            rainfallChart.data.datasets[0].data.shift();
          }
          rainfallChart.update("none");
        }

        if (
          currentRanges.velocity === "1h" ||
          currentRanges.velocity === "1d"
        ) {
          velocityChart.data.datasets[0].data.push({
            x: now,
            y: newVelocityPoint.surface,
          });

          const maxPoints = currentRanges.velocity === "1h" ? 60 : 144;
          if (velocityChart.data.datasets[0].data.length > maxPoints) {
            velocityChart.data.datasets[0].data.shift();
            velocityChart.data.datasets[1].data.shift();
          }
          velocityChart.update("none");
        }

        updateStats();
        updateDataPointsCount();
        updateLastUpdateTime();
      }

      // Export data functionality
      function exportData() {
        const depthData = depthChart.data.datasets[0].data;
        const rainfallData = rainfallChart.data.datasets[0].data;
        const velocityData = velocityChart.data.datasets[0].data;

        let csvContent = "data:text/csv;charset=utf-8,";
        csvContent +=
          "Timestamp,Depth (m),Rainfall (mm/h),Average Velocity (m/s)\n";

        const maxLength = Math.max(
          depthData.length,
          rainfallData.length,
          velocityData.length
        );

        for (let i = 0; i < maxLength; i++) {
          const timestamp =
            depthData[i]?.x || rainfallData[i]?.x || velocityData[i]?.x;
          const depth = depthData[i]?.y.toFixed(3) || "";
          const rainfall = rainfallData[i]?.y.toFixed(1) || "";
          const surfaceVel =
            velocityChart.data.datasets[0].data[i]?.y.toFixed(2) || "";
          const avgVel =
            velocityChart.data.datasets[1].data[i]?.y.toFixed(2) || "";

          const row = `${new Date(
            timestamp
          ).toISOString()},${depth},${rainfall},${surfaceVel},${avgVel}`;
          csvContent += row + "\n";
        }

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute(
          "download",
          `river_monitoring_data_${new Date().toISOString().split("T")[0]}.csv`
        );
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }

      // Toggle fullscreen functionality for charts
      function toggleFullscreen(chartType) {
        const chartSection = event.target.closest(".chart-section");
        if (!document.fullscreenElement) {
          chartSection.requestFullscreen().then(() => {
            chartSection.style.height = "100vh";
            chartSection.style.display = "flex";
            chartSection.style.flexDirection = "column";
            document
              .querySelector(`#${chartType}Chart`)
              .closest(".chart-container").style.flex = "1";
            document
              .querySelector(`#${chartType}Chart`)
              .closest(".chart-container").style.height = "auto";

            if (chartType === "depth") depthChart.resize();
            else if (chartType === "rainfall") rainfallChart.resize();
            else if (chartType === "velocity") velocityChart.resize();
          });
        } else {
          document.exitFullscreen().then(() => {
            chartSection.style.height = "";
            chartSection.style.display = "";
            chartSection.style.flexDirection = "";
            document
              .querySelector(`#${chartType}Chart`)
              .closest(".chart-container").style.flex = "";
            document
              .querySelector(`#${chartType}Chart`)
              .closest(".chart-container").style.height = "500px";

            if (chartType === "depth") depthChart.resize();
            else if (chartType === "rainfall") rainfallChart.resize();
            else if (chartType === "velocity") velocityChart.resize();
          });
        }
      }

      // Initialize everything when page loads
      document.addEventListener("DOMContentLoaded", function () {
        initCharts();
        setInterval(simulateRealtimeUpdate, 5000);
        setInterval(updateLastUpdateTime, 1000);

        // Add fullscreen buttons to all chart headers
        document.getElementById("depthTimeControls").innerHTML += `
          <button class="time-btn" onclick="toggleFullscreen('depth')" title="Toggle Fullscreen">
            Fullscreen
          </button>
        `;

        document.getElementById("rainfallTimeControls").innerHTML += `
          <button class="time-btn" onclick="toggleFullscreen('rainfall')" title="Toggle Fullscreen">
            Fullscreen
          </button>
        `;

        document.getElementById("velocityTimeControls").innerHTML += `
          <button class="time-btn" onclick="toggleFullscreen('velocity')" title="Toggle Fullscreen">
            Fullscreen
          </button>
        `;

        // Add download and refresh buttons to header
        document.querySelector(".header-description").innerHTML += `
          <button onclick="exportData()" style="
            margin-left: 1rem;
            padding: 0.5rem 1rem;
            background-color: var(--success);
            color: var(--foreground);
            border: none;
            border-radius: var(--radius);
            cursor: pointer;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            transition: opacity 0.3s ease;
          " onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
            Download CSV
          </button>
          <button onclick="location.reload()" style="
            margin-left: 0.5rem;
            padding: 0.5rem 1rem;
            background-color: var(--primary);
            color: var(--primary-foreground);
            border: none;
            border-radius: var(--radius);
            cursor: pointer;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            transition: opacity 0.3s ease;
          " onmouseover="this.style.opacity='0.8'" onmouseout="this.style.opacity='1'">
            Refresh
          </button>
        `;
      });

      // Handle window resize
      window.addEventListener("resize", function () {
        if (depthChart) depthChart.resize();
        if (rainfallChart) rainfallChart.resize();
        if (velocityChart) velocityChart.resize();
      });

      // Add keyboard shortcuts
      document.addEventListener("keydown", function (event) {
        if (event.ctrlKey || event.metaKey) {
          switch (event.key) {
            case "1":
              event.preventDefault();
              setTimeRange("depth", "1h");
              break;
            case "2":
              event.preventDefault();
              setTimeRange("depth", "1d");
              break;
            case "3":
              event.preventDefault();
              setTimeRange("depth", "1w");
              break;
            case "4":
              event.preventDefault();
              setTimeRange("depth", "1m");
              break;
            case "r":
              event.preventDefault();
              // Refresh data
              allData = generateMockData();
              mediaData = {
                photos: generateMockPhotos(),
                videos: generateMockVideos(),
              };

              // Update all charts with downsampling
              const depthMaxPoints =
                currentRanges.depth === "1h"
                  ? 60
                  : currentRanges.depth === "1d"
                  ? 144
                  : currentRanges.depth === "1w"
                  ? 168
                  : 200;
              const downsampledDepth = downsampleData(
                allData.depth[currentRanges.depth],
                depthMaxPoints
              );
              depthChart.data.datasets[0].data = downsampledDepth;
              depthChart.update();

              const rainfallMaxPoints =
                currentRanges.rainfall === "1h"
                  ? 60
                  : currentRanges.rainfall === "1d"
                  ? 144
                  : currentRanges.rainfall === "1w"
                  ? 168
                  : 200;
              const downsampledRainfall = downsampleData(
                allData.rainfall[currentRanges.rainfall],
                rainfallMaxPoints
              );
              rainfallChart.data.datasets[0].data = downsampledRainfall;
              rainfallChart.update();

              const velocityMaxPoints =
                currentRanges.velocity === "1h"
                  ? 60
                  : currentRanges.velocity === "1d"
                  ? 144
                  : currentRanges.velocity === "1w"
                  ? 168
                  : 200;
              const downsampledVelocity = downsampleData(
                allData.velocity[currentRanges.velocity],
                velocityMaxPoints
              );
              velocityChart.data.datasets[0].data = downsampledVelocity.map(
                (d) => ({
                  x: d.x,
                  y: d.surface,
                })
              );
              velocityChart.data.datasets[1].data = downsampledVelocity.map(
                (d) => ({
                  x: d.x,
                  y: d.average,
                })
              );
              velocityChart.update();

              updateStats();
              updateDataPointsCount();
              updateMediaGrid();
              break;
          }
        }
      });

      console.log(
        "River Monitoring System with Data Downsampling initialized successfully!"
      );
    </script>
  </body>
</html>
